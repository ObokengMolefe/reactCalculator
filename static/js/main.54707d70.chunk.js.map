{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.54707d70.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__G5PKv\",\"card\":\"Cards_card__QhmxE\",\"infected\":\"Cards_infected__2v8Fz\",\"recovered\":\"Cards_recovered__3-rEr\",\"deaths\":\"Cards_deaths__2ERAw\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({data: {confirmed, recovered, deaths, lastUpdate}}) => {\r\n    if(!confirmed){\r\n        return 'Loading...';\r\n    }\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing = {3} justify = \"center\">\r\n                <Grid item component = {Card} xs={12} md={3} className = {cx(styles.card,styles.infected)}>\r\n                     <CardContent>\r\n                        <Typography color = \"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant= \"h5\">\r\n                            <CountUp start ={0} end = {confirmed.value} duration = {2.5} separator = \",\"/>\r\n                        </Typography>\r\n                        <Typography color = \"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant = \"body2\">Number of Active Cases</Typography>\r\n                    </CardContent>\r\n                </Grid> \r\n                <Grid item component = {Card} xs = {12} md = {3} className = {cx(styles.card,styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color = \"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant= \"h5\">\r\n                            <CountUp start ={0} end = {recovered.value} duration = {2.5} separator = \",\"/>\r\n                        </Typography>\r\n                        <Typography color = \"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant = \"body2\">Number of Recoveries</Typography>\r\n                    </CardContent>\r\n                </Grid><Grid item component = {Card} xs = {12} md = {3} className = {cx(styles.card,styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color = \"textSecondary\" gutterBottom>Deaths</Typography>\r\n                        <Typography variant= \"h5\">\r\n                            <CountUp start ={0} end = {deaths.value} duration = {2.5} separator = \",\"/>\r\n                        </Typography>\r\n                        <Typography color = \"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant = \"body2\">Number of Deaths</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n    try{\r\n        const { data:{ confirmed, recovered, deaths, lastUpdate}} = await axios.get(changeableUrl);\r\n        \r\n        return{\r\n            confirmed, \r\n            recovered, \r\n            deaths, \r\n            lastUpdate\r\n        };\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\nexport const fetchDailyData = async ()=> {\r\n    try{\r\n        const { data } = await axios.get(`${url}/daily`);\r\n\r\n        const modifiedData = data.map((dailyData) =>({\r\n            confirmed : dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n        return modifiedData;\r\n    }catch(error){\r\n        \r\n    }\r\n} \r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const {data : { countries }} = await axios.get(`${url}/countries`);\r\n\r\n        return countries.map((country) => country.name);\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}","import React, {useState, useEffect} from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar} from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data : {confirmed, deaths, recovered}, country}) => {\r\n    const[dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async() =>{\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n    },[]);\r\n\r\n    const lineChart =( \r\n        dailyData.length\r\n        ? (\r\n        <Line\r\n        data = {{\r\n            labels: dailyData.map(({ date }) => date),\r\n            datasets: [{\r\n                data : dailyData.map(({ confirmed }) => confirmed),\r\n                label : 'Infected',\r\n                borderColor : '#3333ff',\r\n                fill: true,\r\n            },{\r\n                data : dailyData.map(({ deaths }) => deaths),\r\n                label : 'Deaths',\r\n                borderColor : 'red',\r\n                backgroundColor: 'rgba(255, 0, 0,  0.5)',\r\n                fill: true,\r\n            }],\r\n        }}\r\n        />) : null\r\n    );\r\n\r\n    const barChart =(\r\n        confirmed\r\n        ?(\r\n            <Bar\r\n            data = {{ \r\n                labels: ['Infected', 'Revovered', 'Deaths'],\r\n                datasets :[{\r\n                    label: 'People',\r\n                    backgroundColor: [\r\n                        'rgba(0, 0, 255, 0.5)',\r\n                        'rgba(0, 255, 0, 0.5)',\r\n                        'rgba(0, 0, 0, 0.5)',\r\n                    ],\r\n                    data:[confirmed.value, recovered.value, deaths.value]\r\n                }]\r\n            }}\r\n            options ={{\r\n                legend : { display: false},\r\n                title: {display: true, text:`Current state in ${country}`}\r\n            }}\r\n            />\r\n        ) : null\r\n    );\r\n    return(\r\n        <div className = {styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl} from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport {fetchCountries} from '../../api';\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const[fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async() => {\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n\r\n        fetchAPI();\r\n    },[setFetchedCountries]); \r\n    return(\r\n        <FormControl className = {styles.formControl}>\r\n            <NativeSelect defaultValue = \"\" onChange = {(e) => handleCountryChange(e.target.value)}>\r\n                <option value = \"\">Global</option>\r\n                {fetchedCountries.map((country, i) => <option key = {i} value = {country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from 'react';\n\nimport {Cards, Chart, CountryPicker} from './components';\nimport styles from './App.module.css';\nimport { fetchData } from './api';\n\nclass App extends React.Component{\nstate = {\n  data: {},\n  country: '', \n}\n\n  async componentDidMount(){\n    const fetchedData = await fetchData();\n\n   \n  }\n\n  handleCountryChange = async(country) => {\n    const fetchedData = await fetchData(country);\n\n    this.setState({ data : fetchedData, country : country });\n  } \n  render(){\n    const { data, country } = this.state;\n    \n    return(\n      <div className = {styles.container}>\n        <Cards data = {data}/>\n        <CountryPicker handleCountryChange = {this.handleCountryChange}/>\n        <Chart data = {data} country = {country}/>\n      </div>\n    ); \n  }\n}\n\nexport default App;    ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3e30E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3fUpL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3L5V-\"};"],"sourceRoot":""}